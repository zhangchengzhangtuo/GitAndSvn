Git的优势：
优势1：使用Git，团队规模不受版本库工具自身的限制
最坏的情况下（每次提交都要会修改同一文件，例如版本库中仅包含一个文件），一个SVN版本库的每小时提交次数存在上限。如果无冲突合并再提交需用时30秒、冲突解决再提交用时300秒，这个上限可能是每小时40个提交。据此一个相对密集开发的版本库拥有四五十个提交账号可能就是极限。
Git的提交是在本地完成的，加之可以采用版本库分级控制的分布式开发模型，因此只有天空才是极限。

优势2：Git分支功能最为强大，分支管理能力让SVN望尘莫及
Git可以很容易地对比两个分支，知道一个分支中哪些提交尚未合并到另一分支，反之亦然。
我不认为SVN的分支是真正的分支，因为分支最基本的提交隔离SVN就没能实现。 在SVN中一次提交可以同时更改主线（/trunk）和分支中的内容， 所以判断一个分支中哪些提交未合并到另外的分支，完全不能对SVN抱有希望。

优势3：Git可以实现更好的发布控制
针对同一个项目，Git可以设置不同层级的版本库（多版本库）， 或者通过不同的分支（多分支）实现对发布的控制。
设置只有发布管理员才有权限推送的版本库或者分支，用于稳定发布版本的维护。
设置只有项目经理、模块管理员才有权推送的版本库或者分支，用用于整合测试。

优势4：隔离开发，提交审核
如何对团队中的新成员的开发进行审核呢？在Git服务器上可以实现用户自建分支和自建版本库的功能， 这样团队中的新成员既能将本地提交推送到服务器以对工作进行备份， 又能够方便团队中的其他成员对自己的提交进行审核。
审核新成员提交时，从其个人版本库或个人分支获取（fetch）提交，从提交说明、代码规范、编译测试 等多方面对提交逐一审核。审核通过执行 git merge 命令合并到开发主线中。

优势5：对合并更好的支持，更少的冲突，更好的冲突解决
因为Git基于对内容的追踪而非对文件名追踪，所以遇到一方或双方对文件名更改时， Git能够很好进行自动合并或提供工具辅助合并。而SVN遇到同样问题时会产生树冲突， 解决起来很麻烦。
Git的基于DAG（有向非环图）的设计比SVN的线性提交提供更好的合并追踪， 避免不必要的冲突，提高工作效率。这是开发者选择Git、抛弃SVN的重要理由。

优势6：保证已修复Bug不再重现
以为创建完毕里程碑标签（tag）便完成软件版本的发布是有风险的， 往往会由于之前的版本（维护版本）中的一些 Hotfix 提交没有合并到最新版本而造成已修复问题在新版本中重现。

优势7：版本库的安全性
SVN版本库安全性很差，是管理员头痛的问题。
SVN版本库服务器端历史数据被篡改，或者硬盘故障导致历史数据被篡改时， 客户端很难发现。管理员的备份也会被污染。
SVN作为集中式版本控制系统，存在单点故障的风险。备份版本库的任务非常繁重。
Git在这方面完胜SVN。首先Git是分布式版本控制系统，每个用户都相当于一份备份， 管理员无需为数据备份而担心。再有Git中包括提交、文件内容等都通过SHA1哈希保证数据的完整性， 任何恶意篡改历史数据都会被及时发现从而被挫败。

更多的十条喜欢Git的理由：
.异地协同工作。
.现场版本控制。
.重写提交说明。
.无尽的后悔药。
.更好用的提交列表。
.更好的差异比较。
.工作进度保存。
.作为SVN前端实现移动办公。
.无处不在的分页器。
.快。

SVN的优势：
SVN具有的悲观锁的功能，能够实现一个用户在编辑时对文件进行锁定，阻止多人同时编辑 一个文件。这一悲观锁的功能是 Git 所不具备的。对于以二进制文件 （Word文档、PPT演示稿） 为主的版本库，为避免多人同时编辑造成合并上的困难， 建议使用SVN做版本控制。